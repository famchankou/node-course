swagger: '2.0'
info:
  description: Node Course
  version: 1.0.0
  title: Node Course
  termsOfService: http://swagger.io/terms/
  contact:
    email: famchankou@gmail.com
# basePath: /v2
tags:
- name: auth
  description: Authorization edpoints
- name: product
  description: Operations on products
- name: user
  description: Operations on users
- name: review
  description: Operations on reviews
# schemes:
# - http
paths:
  /auth:
    post:
      tags:
      - auth
      summary: Request JWT token
      operationId: getJWT
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Request for JWT token
        required: true
        schema:
          type: object
          properties:
              username:
                type: string
              password:
                type: string
      responses:
        200:
          description: successful operation, user found and JWT fetched
          schema:
            $ref: '#/definitions/Auth'
        404:
          description: User not found
  /passport/auth/local:
    post:
      tags:
      - auth
      summary: Request JWT token via Passport
      operationId: getJWTviaPassport
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Request for JWT token via Passport
        required: true
        schema:
          type: object
          properties:
              username:
                type: string
              password:
                type: string
      responses:
        200:
          description: successful operation, user found and JWT fetched
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              token:
                type: string
        404:
          description: User not found
        401:
          description: Unauthorized
  /products:
    post:
      tags:
      - product
      summary: Create new product
      operationId: createProduct
      consumes:
      - application/x-www-form-urlencoded
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Create new product
        required: true
        schema:
          $ref: '#/definitions/Product'
      responses:
        200:
          description: Product created
          schema:
            $ref: '#/definitions/Product'
        400:
          description: Bad request
      security:
        - UserSecurity: []
    get:
      tags:
      - product
      summary: Find all products
      description: Returns all products found
      operationId: getAllProducts
      produces:
      - application/json
      - application/xml
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Product'
        400:
          description: Bad request
        404:
          description: No products found
      security:   
      - UserSecurity: []
  /products/{productId}:
    put:
      tags:
      - product
      summary: Update product
      operationId: updateProduct
      consumes:
      - application/x-www-form-urlencoded
      - application/json
      produces:
      - application/json
      parameters:
      - name: productId
        in: path
        description: ID of product that needs to be updated
        required: true
        type: integer
        format: int64
      - in: body
        name: body
        description: Update product
        required: true
        schema:
          $ref: '#/definitions/Product'
      responses:
        200:
          description: Product updated
          schema:
            $ref: '#/definitions/Product'
        400:
          description: Bad request
      security:
        - UserSecurity: []
    delete:
      tags:
      - product
      summary: Deletes a product
      operationId: deleteProduct
      produces:
      - application/json
      - application/xml
      parameters:
      - name: productId
        in: path
        description: Product id to delete
        required: true
        type: integer
        format: int64
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Product not found
      security:
        - UserSecurity: []  
    get:
      tags:
      - product
      summary: Find product by ID
      description: Returns a single product
      operationId: getProductById
      produces:
      - application/json
      - application/xml
      parameters:
      - name: productId
        in: path
        description: ID of product to return
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Product'
        400:
          description: Invalid ID supplied
        404:
          description: Product not found
      security:
      - UserSecurity: []
  /products/reviews:
    post:
      tags:
      - review
      summary: Create new review
      operationId: createReview
      consumes:
      - multipart/form-data
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Create new review
        required: true
        schema:
          $ref: '#/definitions/Review'
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Review'
        400:
          description: Bad request
      security:
        - UserSecurity: []
  /products/{reviewId}/reviews:     
    get:
      tags:
      - review
      summary: Find all reviews
      description: Returns all reviews found
      operationId: getAllReviews
      produces:
      - application/json
      - application/xml
      parameters:
      - name: reviewId
        in: path
        description: ID of product to return
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Review'
        400:
          description: Bad request
        404:
          description: No reviews found
      security:   
      - UserSecurity: []    
  /users:
    post:
      tags:
      - user
      summary: Create new user
      operationId: createUser
      consumes:
      - application/x-www-form-urlencoded
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Create new user
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        200:
          description: User created
          schema:
            $ref: '#/definitions/User'
        400:
          description: Bad request
      security:
        - UserSecurity: []
    get:
      tags:
      - user
      summary: Find all users
      description: Returns all users found
      operationId: getAllUsers
      produces:
      - application/json
      - application/xml
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        400:
          description: Bad request
        404:
          description: No users found
      security:
      - UserSecurity: []
  /users/{userId}:
    put:
      tags:
      - user
      summary: Update user
      operationId: updateUser
      consumes:
      - application/x-www-form-urlencoded
      - application/json
      produces:
      - application/json
      parameters:
      - name: userId
        in: path
        description: ID of user that needs to be updated
        required: true
        type: integer
        format: int64
      - in: body
        name: body
        description: Update user
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        200:
          description: User updated
          schema:
            $ref: '#/definitions/User'
        400:
          description: Bad request
      security:
        - UserSecurity: []
    delete:
      tags:
      - user
      summary: Deletes a user
      operationId: deleteUser
      produces:
      - application/json
      - application/xml
      parameters:
      - name: userId
        in: path
        description: User id to delete
        required: true
        type: integer
        format: int64
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: User not found
      security:
        - UserSecurity: []  
    get:
      tags:
      - user
      summary: Find user by ID
      description: Returns a single user
      operationId: getUserById
      produces:
      - application/json
      - application/xml
      parameters:
      - name: userId
        in: path
        description: ID of user to return
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        400:
          description: Invalid ID supplied
        404:
          description: User not found
      security:
      - UserSecurity: []
  /mongo/cities:
    post:
      tags:
      - city
      summary: Create new city
      operationId: createCity
      consumes:
      - application/x-www-form-urlencoded
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Create new city
        required: true
        schema:
          $ref: '#/definitions/City'
      responses:
        200:
          description: City created
          schema:
            $ref: '#/definitions/City'
        400:
          description: Bad request
      security:
        - UserSecurity: []
    get:
      tags:
      - city
      summary: Find all cities
      description: Returns all cities found
      operationId: getAllCities
      produces:
      - application/json
      - application/xml
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/City'
        400:
          description: Bad request
        404:
          description: No products found
      security:   
      - UserSecurity: []
  /mongo/cities/{cityId}:
    put:
      tags:
      - city
      summary: Update city
      operationId: updateCity
      consumes:
      - application/x-www-form-urlencoded
      - application/json
      produces:
      - application/json
      parameters:
      - name: cityId
        in: path
        description: ID of city that needs to be updated
        required: true
        type: integer
        format: int64
      - in: body
        name: body
        description: Update city
        required: true
        schema:
          $ref: '#/definitions/City'
      responses:
        200:
          description: City updated
          schema:
            $ref: '#/definitions/City'
        400:
          description: Bad request
      security:
        - UserSecurity: []
    delete:
      tags:
      - city
      summary: Deletes a city
      operationId: deleteCity
      produces:
      - application/json
      - application/xml
      parameters:
      - name: cityId
        in: path
        description: City id to delete
        required: true
        type: integer
        format: int64
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: City not found
      security:
        - UserSecurity: []
securityDefinitions:
  UserSecurity:
    type: apiKey
    in: header
    name: x-access-token
definitions:
  Auth:
    type: object
    description: Authorization model
    required:
    - token
    properties:
      token:
        type: string
        description: Encrypted token string
      data:
        type: object
        properties:
          user:
            type: object
            properties:
              email:
                type: string
                description: User email
              username:
                type: string
                description: Unique username
    xml:
      name: Auth
  Product:
    type: object
    description: Product model
    required:
    - sku
    - name
    - basePrice
    properties:
      userId:
        type: integer
        format: int64
        description: Unique user ID who created the product
      name:
        type: string
        description: Name of the product - specified by user
      sku:
        type: string
        description: Unique product sku
      basePrice:
        type: number
        format: float
        description: Base price of the product
      productType:
        type: string
        description: Product type
  Review:
    type: object
    description: Review model
    required:
    - description
    - productId
    - userId
    properties:
      title:
        type: string
        description: Review title
      description:
        type: string
        description: Review description content
      createdAt:
        type: string
        format: date-time
        description: Review created date
      productId:
        type: integer
        format: int64
        description: Corresponding product ID
      userId:
        type: integer
        format: int64
        description: Corresponding user ID
  User:
    type: object
    description: User model
    required:
    - username
    - password
    - email
    properties:
      name:
        type: string
        description: User first name
      surname:
        type: string
        description: User second name
      age:
        type: integer 
        format: int64
        description: User age
      username:
        type: string
        description: Unique username (nickname)
      email:
        type: string
        description: Unique user email
      password:
        type: string
        description: User password
    xml:
      name: User
  City:
    type: object
    description: City model
    required:
    - name
    - country
    properties:
      name:
        type: string
        description: City name
      country:
        type: string
        description: Country name
      capital:
        type: boolean
        description: Is capital or not
      location:
        type: object
        description: Coordintaes object
        properties:
          lat:
            type: number
            description: Latitude
          long:
            type: number
            description: Longitude
      lastModifiedDate:
        type: string
        description: Date string
    xml:
      name: City
# Added by API Auto Mocking Plugin
host: localhost:8080
basePath: /api
schemes:
 - http
 - https